name: Python Application CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --with dev,test --sync --no-interaction --no-ansi

    - name: Install TA-Lib (system dependency)
      run: |
        sudo apt-get update
        sudo apt-get install -y libta-lib-dev
        # Re-run poetry install if TA-Lib Python wrapper needs to be built against system lib
        # This might be redundant if TA-Lib was already installed correctly by poetry
        # poetry install --with dev,test --sync --no-interaction --no-ansi

    - name: Run linters and formatters (pre-commit)
      run: |
        poetry run pre-commit run --all-files
        # Alternatively, run tools individually:
        # poetry run black --check .
        # poetry run isort --check-only .
        # poetry run flake8 .
        # poetry run mypy .
        # poetry run safety check -r requirements.txt # Generate requirements.txt if needed or use poetry export

    - name: Run Pytest with coverage
      run: |
        poetry run pytest -n auto --maxfail=1 --cov=fx_trader --cov-report=xml --cov-report=term-missing tests/

    - name: Run Mutation Testing (Mutmut)
      run: |
        poetry run mutmut run
        poetry run mutmut html # Generate HTML report
        # Extract MSR and fail if below threshold
        # The following line is a bit complex and might need adjustment based on mutmut's output format
        # MSR=$(poetry run mutmut results | grep "Survived" | awk '{print $1}' | sed 's/%//')
        # For a simpler approach, check the junit.xml or a summary file if mutmut creates one.
        # This example uses a placeholder for MSR extraction and check.
        # A more robust way is to parse the XML output if `mutmut junitxml` is used.
        # For now, let's assume a manual check or a more sophisticated script would handle MSR.
        echo "Mutation testing complete. Check HTML report in artifacts."
        # Example to fail build if MSR is low (requires reliable MSR extraction):
        # if [ $(echo "$MSR < 80" | bc -l) -ne 0 ]; then
        #   echo "Mutation Score ($MSR%) is below 80%. Failing build."
        #   exit 1
        # fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }} # Optional: if your repo is private
        files: ./coverage.xml
        fail_ci_if_error: true

    - name: Build Docker image
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only build on push to main
      run: |
        docker build -t ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ github.sha }} .

    - name: Log in to GitHub Container Registry
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push Docker image to GHCR
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        docker push ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ github.sha }}
        # Optionally, tag as latest
        docker tag ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
        docker push ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest

    - name: Upload Mutmut HTML report
      if: always() # Always run this step to upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mutmut-html-report-${{ matrix.python-version }}
        path: html/mutmut/ # Path where mutmut stores the HTML report