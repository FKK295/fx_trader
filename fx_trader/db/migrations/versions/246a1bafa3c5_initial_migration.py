"""Initial migration

Revision ID: 246a1bafa3c5
Revises: 7f2f6a4320d0
Create Date: 2025-06-30 23:47:28.785994

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '246a1bafa3c5'
down_revision = '7f2f6a4320d0'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('runs')
    op.drop_table('registered_model_aliases')
    op.drop_index(op.f('index_trace_tags_request_id'), table_name='trace_tags')
    op.drop_table('trace_tags')
    op.drop_table('model_version_tags')
    op.drop_index(op.f('index_trace_info_experiment_id_timestamp_ms'), table_name='trace_info')
    op.drop_table('trace_info')
    op.drop_index(op.f('index_trace_request_metadata_request_id'), table_name='trace_request_metadata')
    op.drop_table('trace_request_metadata')
    op.drop_table('registered_model_tags')
    op.drop_index(op.f('index_latest_metrics_run_uuid'), table_name='latest_metrics')
    op.drop_table('latest_metrics')
    op.drop_index(op.f('index_metrics_run_uuid'), table_name='metrics')
    op.drop_table('metrics')
    op.drop_table('experiments')
    op.drop_index(op.f('index_datasets_dataset_uuid'), table_name='datasets')
    op.drop_index(op.f('index_datasets_experiment_id_dataset_source_type'), table_name='datasets')
    op.drop_table('datasets')
    op.drop_table('registered_models')
    op.drop_table('experiment_tags')
    op.drop_index(op.f('index_tags_run_uuid'), table_name='tags')
    op.drop_table('tags')
    op.drop_index(op.f('index_inputs_destination_type_destination_id_source_type'), table_name='inputs')
    op.drop_index(op.f('index_inputs_input_uuid'), table_name='inputs')
    op.drop_table('inputs')
    op.drop_index(op.f('index_params_run_uuid'), table_name='params')
    op.drop_table('params')
    op.drop_table('input_tags')
    op.drop_table('model_versions')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('model_versions',
    sa.Column('name', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('creation_time', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('last_updated_time', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=5000), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('current_stage', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('run_id', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('status_message', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('run_link', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('storage_location', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['name'], ['registered_models.name'], name='model_versions_name_fkey', onupdate='CASCADE'),
    sa.PrimaryKeyConstraint('name', 'version', name='model_version_pk'),
    postgresql_ignore_search_path=False
    )
    op.create_table('input_tags',
    sa.Column('input_uuid', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('value', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('input_uuid', 'name', name=op.f('input_tags_pk'))
    )
    op.create_table('params',
    sa.Column('key', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('value', sa.VARCHAR(length=8000), autoincrement=False, nullable=False),
    sa.Column('run_uuid', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['run_uuid'], ['runs.run_uuid'], name=op.f('params_run_uuid_fkey')),
    sa.PrimaryKeyConstraint('key', 'run_uuid', name=op.f('param_pk'))
    )
    op.create_index(op.f('index_params_run_uuid'), 'params', ['run_uuid'], unique=False)
    op.create_table('inputs',
    sa.Column('input_uuid', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('source_type', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('source_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('destination_type', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('destination_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('source_type', 'source_id', 'destination_type', 'destination_id', name=op.f('inputs_pk'))
    )
    op.create_index(op.f('index_inputs_input_uuid'), 'inputs', ['input_uuid'], unique=False)
    op.create_index(op.f('index_inputs_destination_type_destination_id_source_type'), 'inputs', ['destination_type', 'destination_id', 'source_type'], unique=False)
    op.create_table('tags',
    sa.Column('key', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('value', sa.VARCHAR(length=8000), autoincrement=False, nullable=True),
    sa.Column('run_uuid', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['run_uuid'], ['runs.run_uuid'], name=op.f('tags_run_uuid_fkey')),
    sa.PrimaryKeyConstraint('key', 'run_uuid', name=op.f('tag_pk'))
    )
    op.create_index(op.f('index_tags_run_uuid'), 'tags', ['run_uuid'], unique=False)
    op.create_table('experiment_tags',
    sa.Column('key', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('value', sa.VARCHAR(length=5000), autoincrement=False, nullable=True),
    sa.Column('experiment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['experiment_id'], ['experiments.experiment_id'], name=op.f('experiment_tags_experiment_id_fkey')),
    sa.PrimaryKeyConstraint('key', 'experiment_id', name=op.f('experiment_tag_pk'))
    )
    op.create_table('registered_models',
    sa.Column('name', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.Column('creation_time', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('last_updated_time', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=5000), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('name', name='registered_model_pk'),
    postgresql_ignore_search_path=False
    )
    op.create_table('datasets',
    sa.Column('dataset_uuid', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('experiment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('digest', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('dataset_source_type', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('dataset_source', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('dataset_schema', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('dataset_profile', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['experiment_id'], ['experiments.experiment_id'], name=op.f('fk_datasets_experiment_id_experiments'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('experiment_id', 'name', 'digest', name=op.f('dataset_pk'))
    )
    op.create_index(op.f('index_datasets_experiment_id_dataset_source_type'), 'datasets', ['experiment_id', 'dataset_source_type'], unique=False)
    op.create_index(op.f('index_datasets_dataset_uuid'), 'datasets', ['dataset_uuid'], unique=False)
    op.create_table('experiments',
    sa.Column('experiment_id', sa.INTEGER(), server_default=sa.text("nextval('experiments_experiment_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.Column('artifact_location', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('lifecycle_stage', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('creation_time', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('last_update_time', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.CheckConstraint("lifecycle_stage::text = ANY (ARRAY['active'::character varying, 'deleted'::character varying]::text[])", name='experiments_lifecycle_stage'),
    sa.PrimaryKeyConstraint('experiment_id', name='experiment_pk'),
    sa.UniqueConstraint('name', name='experiments_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('metrics',
    sa.Column('key', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('timestamp', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('run_uuid', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('step', sa.BIGINT(), server_default=sa.text("'0'::bigint"), autoincrement=False, nullable=False),
    sa.Column('is_nan', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['run_uuid'], ['runs.run_uuid'], name=op.f('metrics_run_uuid_fkey')),
    sa.PrimaryKeyConstraint('key', 'timestamp', 'step', 'run_uuid', 'value', 'is_nan', name=op.f('metric_pk'))
    )
    op.create_index(op.f('index_metrics_run_uuid'), 'metrics', ['run_uuid'], unique=False)
    op.create_table('latest_metrics',
    sa.Column('key', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('timestamp', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('step', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('is_nan', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('run_uuid', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['run_uuid'], ['runs.run_uuid'], name=op.f('latest_metrics_run_uuid_fkey')),
    sa.PrimaryKeyConstraint('key', 'run_uuid', name=op.f('latest_metric_pk'))
    )
    op.create_index(op.f('index_latest_metrics_run_uuid'), 'latest_metrics', ['run_uuid'], unique=False)
    op.create_table('registered_model_tags',
    sa.Column('key', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('value', sa.VARCHAR(length=5000), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['name'], ['registered_models.name'], name=op.f('registered_model_tags_name_fkey'), onupdate='CASCADE'),
    sa.PrimaryKeyConstraint('key', 'name', name=op.f('registered_model_tag_pk'))
    )
    op.create_table('trace_request_metadata',
    sa.Column('key', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('value', sa.VARCHAR(length=8000), autoincrement=False, nullable=True),
    sa.Column('request_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['request_id'], ['trace_info.request_id'], name=op.f('fk_trace_request_metadata_request_id'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('key', 'request_id', name=op.f('trace_request_metadata_pk'))
    )
    op.create_index(op.f('index_trace_request_metadata_request_id'), 'trace_request_metadata', ['request_id'], unique=False)
    op.create_table('trace_info',
    sa.Column('request_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('experiment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('timestamp_ms', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('execution_time_ms', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['experiment_id'], ['experiments.experiment_id'], name='fk_trace_info_experiment_id'),
    sa.PrimaryKeyConstraint('request_id', name='trace_info_pk'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('index_trace_info_experiment_id_timestamp_ms'), 'trace_info', ['experiment_id', 'timestamp_ms'], unique=False)
    op.create_table('model_version_tags',
    sa.Column('key', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('value', sa.VARCHAR(length=5000), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['name', 'version'], ['model_versions.name', 'model_versions.version'], name=op.f('model_version_tags_name_version_fkey'), onupdate='CASCADE'),
    sa.PrimaryKeyConstraint('key', 'name', 'version', name=op.f('model_version_tag_pk'))
    )
    op.create_table('trace_tags',
    sa.Column('key', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('value', sa.VARCHAR(length=8000), autoincrement=False, nullable=True),
    sa.Column('request_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['request_id'], ['trace_info.request_id'], name=op.f('fk_trace_tags_request_id'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('key', 'request_id', name=op.f('trace_tag_pk'))
    )
    op.create_index(op.f('index_trace_tags_request_id'), 'trace_tags', ['request_id'], unique=False)
    op.create_table('registered_model_aliases',
    sa.Column('alias', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['name'], ['registered_models.name'], name=op.f('registered_model_alias_name_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('name', 'alias', name=op.f('registered_model_alias_pk'))
    )
    op.create_table('runs',
    sa.Column('run_uuid', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('source_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('source_name', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('entry_point_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=9), autoincrement=False, nullable=True),
    sa.Column('start_time', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('end_time', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('source_version', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('lifecycle_stage', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('artifact_uri', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('experiment_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('deleted_time', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.CheckConstraint("lifecycle_stage::text = ANY (ARRAY['active'::character varying, 'deleted'::character varying]::text[])", name=op.f('runs_lifecycle_stage')),
    sa.CheckConstraint("source_type::text = ANY (ARRAY['NOTEBOOK'::character varying, 'JOB'::character varying, 'LOCAL'::character varying, 'UNKNOWN'::character varying, 'PROJECT'::character varying]::text[])", name=op.f('source_type')),
    sa.CheckConstraint("status::text = ANY (ARRAY['SCHEDULED'::character varying, 'FAILED'::character varying, 'FINISHED'::character varying, 'RUNNING'::character varying, 'KILLED'::character varying]::text[])", name=op.f('runs_status_check')),
    sa.ForeignKeyConstraint(['experiment_id'], ['experiments.experiment_id'], name=op.f('runs_experiment_id_fkey')),
    sa.PrimaryKeyConstraint('run_uuid', name=op.f('run_pk'))
    )
    # ### end Alembic commands ###
